# Builds for all operating system platforms, and uploads executable to the release
# This workflow uses both self-hosted, and GitHub action runners

name: Build and Upload Artifact

on:
  workflow_dispatch:
    inputs:
      release_id:
        description: Release ID to upload assets
        required: true
        type: string
  release:
    types:
      - published

jobs:
  lint-and-test:
    uses:
      ./.github/workflows/pre-release.yml
    with:
      build: 'false'
  release-check:
    runs-on: self-hosted
    needs: lint-and-test
    outputs:
      release-id: ${{ steps.get-release-id.outputs.release_id }}
    steps:
      - name: Check Release ID
        id: get-release-id
        run: |
          if [ -n "${{ github.event.release.id }}" ]; then
            echo "Release ID: ${{ github.event.release.id }}"
            echo "release_id=${{ github.event.release.id }}" >> "$GITHUB_OUTPUT"
          else
            echo "Failed to fetch current release id, trying to fetch externally"
            release_id=$(curl -s -X GET \
              -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
              jq -r ".id")
            if [ -n "$release_id" ]; then
              echo "Release ID: ${{ github.event.release.id }}"
              echo "release_id=$release_id" >> "$GITHUB_OUTPUT"
            else
              echo "Release ID not available in the event."
              exit 1
            fi
          fi

# Upload assets for different OS and Architecture
  build-and-upload:
    if: ${{ github.event_name == 'release' }}
    needs: release-check
    strategy:
      matrix:
        platform:
          # Naming Convention: {operating_system}-{architecture}-{package_name}.{archive_format}
          - release_for: darwin-amd64
            os: darwin
            target: x86_64-apple-darwin
            bin: filebrowser
            name: darwin-amd64-filebrowser.tar.gz
            pkg-name: darwin-amd64-filebrowser
            command: build

          - release_for: linux-amd64
            os: ubuntu
            target: x86_64-unknown-linux-gnu
            bin: filebrowser
            name: linux-amd64-filebrowser.tar.gz
            pkg-name: linux-amd64-filebrowser
            command: build

          - release_for: windows-amd64
            os: windows
            target: x86_64-pc-windows-msvc
            bin: filebrowser.exe
            name: windows-amd64-filebrowser.zip
            pkg-name: windows-amd64-filebrowser
            command: build

    name: Upload asset for ${{ matrix.platform.release_for }}
    runs-on:
      - self-hosted
      - ${{ matrix.platform.os }}
    permissions:
      contents: write
    steps:
      - name: Release ID Propagation
        run: |
          if [ -n "${{ needs.release-check.outputs.release-id }}" ]; then
            echo "Release ID propagated: ${{ needs.release-check.outputs.release-id }}"
          else
            echo "Release ID propagation failed. Exiting.."
            exit 1
          fi
          echo "start_time=$(date +%s)" >> "$GITHUB_ENV"
        shell: bash
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: 1.22.2
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build Essentials
        run: |
          SHELL="/usr/bin/env bash"
          BASE_PATH="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
          VERSION=$(git describe --tags --always --match=v* 2> /dev/null || cat "$BASE_PATH/.version" 2> /dev/null || echo v0)
          VERSION_HASH=$(git rev-parse HEAD)
          go() {
              GOGC=off go "$@"
          }
          MODULE=$(env GO111MODULE=on go list -m)
          TOOLS_DIR="$BASE_PATH/tools"
          TOOLS_BIN="$TOOLS_DIR/bin"
          mkdir -p "$TOOLS_BIN"
          export PATH="$TOOLS_BIN:$PATH"
          LDFLAGS+="-X \"$MODULE/version.Version=$VERSION\" -X \"$MODULE/version.CommitSHA=$VERSION_HASH\""
        shell: bash

      # IMPORTANT: frontend should be built first, since it is required when creating the binary
      - name: Build Frontend
        run: cd frontend && npm ci && npm run build
        shell: bash

      - name: Build Backend
        run: go build -ldflags "$LDFLAGS" -o .
        shell: bash

      - name: Copy Asset (Windows)
        if: matrix.platform.os == 'windows'
        run: |
          mkdir -p ${{ matrix.platform.pkg-name }}
          cp ${{ matrix.platform.bin }} ${{ matrix.platform.pkg-name }}/${{ matrix.platform.bin }}
          Compress-Archive -DestinationPath ${{ matrix.platform.name }} -Path ${{ matrix.platform.pkg-name }}
        shell: pwsh

      - name: Copy Asset (macOS/Linux/RaspberryPi)
        if: matrix.platform.os != 'windows'
        run: |
          mkdir -p ${{ matrix.platform.pkg-name }}
          cp ${{ matrix.platform.bin }} ${{ matrix.platform.pkg-name }}/${{ matrix.platform.bin }}
          tar -zcvf ${{ matrix.platform.name }} ${{ matrix.platform.pkg-name }}
        shell: bash

      - name: Upload Artifact
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
          -H "Content-Type: application/octet-stream" \
          --data-binary @"${{ matrix.platform.name }}" \
          "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ needs.release-check.outputs.release-id }}/assets?name=${{ matrix.platform.name }}"
        shell: bash

      - name: Runtime Analyzer
        run: |
          start=${{ env.start_time }}
          end=$(date +%s)
          time_taken=$((end-start))
          echo "Time taken for ${{ matrix.platform.os }}: $time_taken s"
        shell: bash
