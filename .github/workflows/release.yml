# Builds for all operating system platforms, and uploads executable to the release
# This workflow uses both self-hosted, and GitHub action runners

name: Build and Upload Artifact

on:
  release:
    types:
      - published

jobs:
  lint-and-test:
    uses:
      ./.github/workflows/pre-release.yml
    with:
      build: 'false'
  release-check:
    runs-on: self-hosted
    needs: lint-and-test
    outputs:
      release-id: ${{ steps.get-release-id.outputs.release_id }}
    steps:
      - name: Check Release ID
        id: get-release-id
        run: |
          if [ -n "${{ github.event.release.id }}" ]; then
            echo "Release ID: ${{ github.event.release.id }}"
            echo "release_id=${{ github.event.release.id }}" >> "$GITHUB_OUTPUT"
          else
            echo "Failed to fetch current release id, trying to fetch externally"
            release_id=$(curl -s -X GET \
              -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
              jq -r ".id")
            if [ -n "$release_id" ]; then
              echo "Release ID: ${{ github.event.release.id }}"
              echo "release_id=$release_id" >> "$GITHUB_OUTPUT"
            else
              echo "Release ID not available in the event."
              exit 1
            fi
          fi

# Upload assets for different OS and Architecture
  upload_assets:
    if: ${{ github.event_name == 'release' }}
    needs: release-check
    strategy:
      matrix:
        platform:
          # Naming Convention: {operating_system}-{architecture}-{package_name}.{archive_format}
          # darwin - 2
          - release_for: darwin-amd64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: filebrowser
            name: darwin-amd64-filebrowser.tar.gz
            pkg-name: darwin-amd64-filebrowser
            command: build

          - release_for: darwin-arm64
            os: macOS-latest
            target: arm64-apple-darwin
            bin: filebrowser
            name: darwin-arm64-filebrowser.tar.gz
            pkg-name: darwin-arm64-filebrowser
            command: build

# # GitHub doesn't have runners available for FreeBSD: https://github.com/actions/runner/issues/385
#          # freebsd - 3
#          - release_for: freebsd-386
#            os: freebsd-latest
#            target: i386-unknown-freebsd
#            bin: filebrowser
#            name: freebsd-386-filebrowser.tar.gz
#            pkg-name: freebsd-386-filebrowser
#            command: build
#
#          - release_for: freebsd-amd64
#            os: freebsd-latest
#            target: x86_64-unknown-freebsd
#            bin: filebrowser
#            name: freebsd-amd64-filebrowser.tar.gz
#            pkg-name: freebsd-amd64-filebrowser
#            command: build
#
#          - release_for: freebsd-arm64
#            os: freebsd-latest
#            target: aarch64-unknown-freebsd
#            bin: filebrowser
#            name: freebsd-arm64-filebrowser.tar.gz
#            pkg-name: freebsd-arm64-filebrowser
#            command: build

          # Linux - 7
          - release_for: linux-386
            os: ubuntu-20.04
            target: i686-unknown-linux-gnu
            bin: filebrowser
            name: linux-386-filebrowser.tar.gz
            pkg-name: linux-386-filebrowser
            command: build

          - release_for: linux-amd64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: filebrowser
            name: linux-amd64-filebrowser.tar.gz
            pkg-name: linux-amd64-filebrowser
            command: build

          - release_for: linux-arm64
            os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            bin: filebrowser
            name: linux-arm64-filebrowser.tar.gz
            pkg-name: linux-arm64-filebrowser
            command: build

          - release_for: linux-armv5
            os: ubuntu-20.04
            target: armv5te-unknown-linux-gnueabi
            bin: filebrowser
            name: linux-armv5-filebrowser.tar.gz
            pkg-name: linux-armv5-filebrowser
            command: build

          - release_for: linux-armv6
            os: ubuntu-20.04
            target: armv6-unknown-linux-gnueabihf
            bin: filebrowser
            name: linux-armv6-filebrowser.tar.gz
            pkg-name: linux-armv6-filebrowser
            command: build

          - release_for: linux-armv7
            os: ubuntu-20.04
            target: armv7-unknown-linux-gnueabihf
            bin: filebrowser
            name: linux-armv7-filebrowser.tar.gz
            pkg-name: linux-armv7-filebrowser
            command: build

          - release_for: linux-riscv64
            os: ubuntu-20.04
            target: riscv64gc-unknown-linux-gnu
            bin: filebrowser
            name: linux-riscv64-filebrowser.tar.gz
            pkg-name: linux-riscv64-filebrowser
            command: build

          # Windows - 6
          - release_for: windows-386
            os: windows-latest
            target: i686-pc-windows-msvc
            bin: filebrowser.exe
            name: windows-386-filebrowser.zip
            pkg-name: windows-386-filebrowser
            command: build

          - release_for: windows-amd64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: filebrowser.exe
            name: windows-amd64-filebrowser.zip
            pkg-name: windows-amd64-filebrowser
            command: build

          - release_for: windows-arm64
            os: windows-latest
            target: arm64-pc-windows-msvc
            bin: filebrowser.exe
            name: windows-arm64-filebrowser.zip
            pkg-name: windows-arm64-filebrowser
            command: build

          - release_for: windows-armv5
            os: windows-latest
            target: armv5-pc-windows-msvc
            bin: filebrowser.exe
            name: windows-armv5-filebrowser.zip
            pkg-name: windows-armv5-filebrowser
            command: build

          - release_for: windows-armv6
            os: windows-latest
            target: armv6-pc-windows-msvc
            bin: filebrowser.exe
            name: windows-armv6-filebrowser.zip
            pkg-name: windows-armv6-filebrowser
            command: build

          - release_for: windows-armv7
            os: windows-latest
            target: armv7-pc-windows-msvc
            bin: filebrowser.exe
            name: windows-armv7-filebrowser.zip
            pkg-name: windows-armv7-filebrowser
            command: build

    name: Upload asset for ${{ matrix.platform.release_for }}
    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: write
    steps:
      - name: Release ID Propagation
        run: |
          if [ -n "${{ needs.release-check.outputs.release-id }}" ]; then
            echo "Release ID propagated: ${{ needs.release-check.outputs.release-id }}"
          else
            echo "Release ID propagation failed. Exiting.."
            exit 1
          fi
        shell: bash
      - name: Targeted Release
        # checks if the `release_for` is part of a comma separated variable in GitHub
        # this is to prevent exhausting GH actions needlessly
        # sample input for the gh variable `target_os`: linux-amd64,darwin-amd64,windows-amd64
        run: |
          release=true;
          if [ "${{ vars.target_os }}" ]; then
            if [[ ",${{ vars.target_os }}," != *",${{ matrix.platform.release_for }},"* ]]; then
              echo "Skipping release for ${{ matrix.platform.release_for }}, expected any of [${{ vars.target_os }}]"
              release=false;
            fi
          fi
          echo "release=$release" >> $GITHUB_ENV
        shell: bash
      - uses: actions/checkout@v4
        if: env.release == 'true'
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        if: env.release == 'true'
        with:
          go-version: 1.22.1
      - uses: actions/setup-node@v4
        if: env.release == 'true'
        with:
          node-version: '18'

      - name: Build Essentials
        if: env.release == 'true'
        run: |
          SHELL="/usr/bin/env bash"
          BASE_PATH="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
          VERSION=$(git describe --tags --always --match=v* 2> /dev/null || cat "$BASE_PATH/.version" 2> /dev/null || echo v0)
          VERSION_HASH=$(git rev-parse HEAD)
          go() {
              GOGC=off go "$@"
          }
          MODULE=$(env GO111MODULE=on go list -m)
          TOOLS_DIR="$BASE_PATH/tools"
          TOOLS_BIN="$TOOLS_DIR/bin"
          mkdir -p "$TOOLS_BIN"
          export PATH="$TOOLS_BIN:$PATH"
          LDFLAGS+="-X \"$MODULE/version.Version=$VERSION\" -X \"$MODULE/version.CommitSHA=$VERSION_HASH\""
        shell: bash

      # IMPORTANT: frontend should be built first, since it is required when creating the binary
      - name: Build Frontend
        if: env.release == 'true'
        run: cd frontend && npm ci && npm run build
        shell: bash

      - name: Build Backend
        if: env.release == 'true'
        run: go build -ldflags "$LDFLAGS" -o .
        shell: bash

      - name: Copy Asset (Windows)
        if: env.release == 'true' && matrix.platform.os == 'windows-latest'
        run: |
          mkdir -p ${{ matrix.platform.pkg-name }}
          cp ${{ matrix.platform.bin }} ${{ matrix.platform.pkg-name }}/${{ matrix.platform.bin }}
          Compress-Archive -DestinationPath ${{ matrix.platform.name }} -Path ${{ matrix.platform.pkg-name }}
        shell: pwsh

      - name: Copy Asset (macOS/Linux/RaspberryPi)
        if: env.release == 'true' && matrix.platform.os != 'windows-latest'
        run: |
          mkdir -p ${{ matrix.platform.pkg-name }}
          cp ${{ matrix.platform.bin }} ${{ matrix.platform.pkg-name }}/${{ matrix.platform.bin }}
          tar -zcvf ${{ matrix.platform.name }} ${{ matrix.platform.pkg-name }}
        shell: bash

      - name: Upload Artifact
        if: env.release == 'true'
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
          -H "Content-Type: application/octet-stream" \
          --data-binary @"${{ matrix.platform.name }}" \
          "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ needs.release-check.outputs.release-id }}/assets?name=${{ matrix.platform.name }}"
        shell: bash
