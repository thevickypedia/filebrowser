name: build and upload asset

on:
  push:
    branches:
      - main
  release:
    types:
      - published
  workflow_dispatch:

jobs:
# linters
  pre-flight-check:
    runs-on: ubuntu-latest
    outputs:
      release-id: ${{ steps.check-release-id.outputs.release_id }}
    steps:
      - name: Check Release ID
        id: check-release-id
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            echo "Running pre-flight check"
          else
            exit 0
          fi
          if [ -n "${{ github.event.release.id }}" ]; then
            echo "Release ID: ${{ github.event.release.id }}"
            echo "release_id=${{ github.event.release.id }}" >> "$GITHUB_OUTPUT"
          else
            echo "Failed to fetch current release id, trying to fetch externally"
            release_id=$(curl -s -X GET \
              -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
              jq -r ".id")
            if [ -n "$release_id" ]; then
              echo "Release ID: ${{ github.event.release.id }}"
              echo "release_id=$release_id" >> "$GITHUB_OUTPUT"
            else
              echo "Release ID not available in the event."
              exit 1
            fi
          fi
  lint-frontend:
    needs: pre-flight-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: make lint-frontend
  lint-backend:
    needs: pre-flight-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.21.0
      - run: make lint-backend
  lint-commits:
    needs: pre-flight-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: make lint-commits
  lint:
    runs-on: ubuntu-latest
    needs: [lint-frontend, lint-backend, lint-commits]
    steps:
      - run: echo "done"

# tests
  test-frontend:
    needs: pre-flight-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - run: make test-frontend
  test-backend:
    needs: pre-flight-check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 1.21.0
      - run: make test-backend
  test:
    runs-on: ubuntu-latest
    needs: [test-frontend, test-backend]
    steps:
      - run: echo "done"

  upload_assets:
    if: ${{ github.event_name == 'release' }}
    needs: [lint, test, pre-flight-check]
    strategy:
      matrix:
        platform:
          - release_for: Linux-x86_64
            os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            bin: filebrowser
            name: FileBrowser-Linux-x86_64.tar.gz
            pkg-name: FileBrowser-Linux-x86_64
            command: build

          - release_for: Windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
            bin: filebrowser.exe
            name: FileBrowser-Windows-x86_64.zip
            pkg-name: FileBrowser-Windows-x86_64
            command: build

          - release_for: macOS-x86_64
            os: macOS-latest
            target: x86_64-apple-darwin
            bin: filebrowser
            name: FileBrowser-Darwin-x86_64.tar.gz
            pkg-name: FileBrowser-Darwin-x86_64
            command: build

          - release_for: RaspberryPi
            os: ubuntu-20.04
            target: arm-unknown-linux-gnueabihf
            bin: filebrowser
            name: FileBrowser-RaspberryPi.tar.gz
            pkg-name: FileBrowser-RaspberryPi
            command: build

    name: Upload asset for ${{ matrix.platform.release_for }}
    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v5
        with:
          go-version: 1.21.0
      - uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Build Essentials
        run: |
          SHELL="/usr/bin/env bash"
          BASE_PATH="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"
          VERSION=$(git describe --tags --always --match=v* 2> /dev/null || cat "$BASE_PATH/.version" 2> /dev/null || echo v0)
          VERSION_HASH=$(git rev-parse HEAD)
          go() {
              GOGC=off go "$@"
          }
          MODULE=$(env GO111MODULE=on go list -m)
          TOOLS_DIR="$BASE_PATH/tools"
          TOOLS_BIN="$TOOLS_DIR/bin"
          mkdir -p "$TOOLS_BIN"
          export PATH="$TOOLS_BIN:$PATH"
          LDFLAGS+="-X \"$MODULE/version.Version=$VERSION\" -X \"$MODULE/version.CommitSHA=$VERSION_HASH\""
        shell: bash

      - name: Build Frontend
        run: cd frontend && npm ci && npm run build
        shell: bash

      - name: Build Backend
        run: go build -ldflags "$LDFLAGS" -o .
        shell: bash

      - name: Copy Artifact (Windows)
        if: ${{ matrix.platform.os == 'windows-latest' }}
        run: |
          mkdir -p ${{ matrix.platform.pkg-name }}
          cp ${{ matrix.platform.bin }} ${{ matrix.platform.pkg-name }}/${{ matrix.platform.bin }}
          Compress-Archive -DestinationPath ${{ matrix.platform.name }} -Path ${{ matrix.platform.pkg-name }}/

      - name: Copy Artifact (macOS/Linux/RaspberryPi)
        if: ${{ matrix.platform.os != 'windows-latest' }}
        run: |
          mkdir -p ${{ matrix.platform.pkg-name }}
          cp ${{ matrix.platform.bin }} ${{ matrix.platform.pkg-name }}/${{ matrix.platform.bin }}
          tar -zcvf ${{ matrix.platform.name }} ${{ matrix.platform.pkg-name }}/

      - name: Upload Asset to Release
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.GIT_TOKEN }}" \
          -H "Content-Type: application/octet-stream" \
          --data-binary @"${{ matrix.platform.name }}" \
          "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ needs.pre-flight-check.outputs.release-id }}/assets?name=${{ matrix.platform.name }}"
        shell: bash
